Описание реализации проекта:
Старался реализовать его применяя лучшие практики и design patterns.
Скажу сразу, что я в этом проекте не написал DTO модели, но в реальном большом прокте активно бы их использовал.
Также старался не подключать библиотеки на фронт, чтобы не нагружать проект и не увелчивать время сборки,
поэтому необходимая информация выводиться некрасиво - или в консоль, или в алерт. 
(Подключен лишь bootstrap и fontawesome)

Проект использует .Net core WebAPI + Angular 6.

Кратко о логике: Существуют модель "Напиток", модель "Монета" и модель "Монеты в аппарате".
При запуске приложения оно подтягивает существующие напитки и разновидности монет 
(есть возможность легко добавить монеты другого номинала).
При совершении заказа валидация кол-ва брошенных монет и суммы заказа валидируется как на фронте, 
так и на бекенде.
После совершения заказа на бекенде рассчитывается сдача и возвращается клиенту, при этом происходят 
необходимые манипуляции с базой данных (Уменьшение числа напитков, увеличения или уменьшение монет в автомате и тд)
(Если у автомата не хватает монет для сдачи, то он выдаст то, что есть, но не больше необходимой к выдаче суммы).
Проект не использует Signalr, но можно было бы его подключить для уменьшения обращений к бд.

Connection string и secret key для админки вынесены в appsettings.
Url для бекенда на фронте - в enviroments.
База данных инициализируется при запуске приложения, но если что то пойдет не так, прикладываю архив с ней.
Для запуска фронта необходимо выполнить npm install => ng serve.

Из доп заданий сделал - Возможность покупки нескольких напитков перед получением сдачи.
Возможность импорта напитков сделаю устно, если вы позволите.
Делал бы так:
Написал метод контроллера напитков, который бы принимал путь к файлу(или)сам файл в формате json
Парсил бы его и десеарелизовал в массив Soda.
После чего проходил бы по нему(массиву) foreach(var soda of (массив Soda)) и записывал в бд.
После цикла Commit DB.

P.S. фронт тестировал в Chrome и Firefox